import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from "@stencil/core";
import ApolloClient from 'apollo-boost';
import gql from 'graphql-tag';
// import { ApolloProvider, Query, Mutation } from 'stencil-apollo';
const client = new ApolloClient({
    // uri: 'https://graphql-voter-app.herokuapp.com/'
    uri: 'http://localhost:5000/graphql'
});
export const MyComponentWithCodegen = class {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
    }
    renderUpvoteButton(postId) {
        return (h("apollo-upvote-post", { renderer: upvotePost => h("button", { onClick: () => upvotePost({ variables: { postId } }) }, "Upvote") }));
    }
    changeStatus() {
        const CHANGE_AGENT_STATUS = gql `
      mutation agentOnlineStatus($name: String!) {
        updatePosts (name: $name, agentOnline: true) {
          name
          agent_online
        }
      }
  `;
        return h("apollo-query", { query: CHANGE_AGENT_STATUS });
    }
    renderTestButton() {
        return (h("div", null, h("button", { onClick: () => this.changeStatus() }, "Change Agent Status")));
    }
    render() {
        return (h("apollo-provider", { client: client }, this.renderTestButton(), h("apollo-all-posts", { renderer: ({ data, loading }) => {
                console.log('taco', data);
                if (loading) {
                    return 'Loading...';
                }
                return (h("ul", null, data.agents.map(person => (h("li", null, person.name, " is online ", `${person.agent_online && true}`)))));
            } })));
    }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:my-component-with-codegen"; }
};
