import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from "@stencil/core";
import ApolloClient from 'apollo-boost';
import gql from 'graphql-tag';
// import { ApolloProvider, Query, Mutation } from 'stencil-apollo';
const client = new ApolloClient({
    // uri: 'https://graphql-voter-app.herokuapp.com/'
    uri: 'http://localhost:5000/graphql'
});
const LAUNCHES_QUERY = gql `
  query LaunchesQuery {
    launches {
      flight_number
      mission_name
      launch_date_local
      launch_success
    }
  }
`;
export const MyComponentWithCodegen = class {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
    }
    renderUpvoteButton(postId) {
        return (h("apollo-upvote-post", { renderer: upvotePost => h("button", { onClick: () => upvotePost({ variables: { postId } }) }, "Upvote") }));
    }
    renderTestButton() {
        return (h("div", null, "Test Text"));
    }
    render() {
        return (h("apollo-provider", { client: client }, h("apollo-query", { query: LAUNCHES_QUERY }, ({ data, loading }) => {
            if (loading) {
                return 'Loading';
            }
            return h("p", null, "data");
        }))
        // <apollo-provider client={client}>
        //   {this.renderTestButton()}
        //   <apollo-all-posts
        //     renderer={({ data, loading }) => {
        //       console.log('taco', data)
        //       if (loading) {
        //         return 'Loading...';
        //       }
        //       return (
        //         <ul>
        //           {data.posts.map(post => (
        //             <li>
        //               {post.title} by {post.author.firstName} {post.author.lastName} ({post.votes} votes){' '}
        //               {this.renderUpvoteButton(post.id)}
        //             </li>
        //           ))}
        //         </ul>
        //       );
        //     }}/>
        // </apollo-provider>
        );
    }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:my-component-with-codegen"; }
};
