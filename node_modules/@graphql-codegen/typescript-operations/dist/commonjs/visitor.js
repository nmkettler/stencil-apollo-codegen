"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const visitor_plugin_common_1 = require("@graphql-codegen/visitor-plugin-common");
const ts_operation_variables_to_object_1 = require("./ts-operation-variables-to-object");
const graphql_2 = require("graphql");
const ts_selection_set_processor_1 = require("./ts-selection-set-processor");
class TypeScriptDocumentsVisitor extends visitor_plugin_common_1.BaseDocumentsVisitor {
    constructor(schema, config, allFragments) {
        super(config, {
            noExport: visitor_plugin_common_1.getConfigValue(config.noExport, false),
            avoidOptionals: typeof config.avoidOptionals === 'boolean' ? visitor_plugin_common_1.getConfigValue(config.avoidOptionals, false) : false,
            immutableTypes: visitor_plugin_common_1.getConfigValue(config.immutableTypes, false),
            nonOptionalTypename: visitor_plugin_common_1.getConfigValue(config.nonOptionalTypename, false),
        }, schema);
        const clearOptional = (str) => {
            const prefix = this.config.namespacedImportName ? `${this.config.namespacedImportName}\.` : '';
            const rgx = new RegExp(`^${prefix}Maybe<(.*?)>$`, 'is');
            if (str.startsWith(`${this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : ''}Maybe`)) {
                return str.replace(rgx, '$1');
            }
            return str;
        };
        const wrapTypeWithModifiers = (baseType, type) => {
            const prefix = this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '';
            if (graphql_2.isNonNullType(type)) {
                return clearOptional(wrapTypeWithModifiers(baseType, type.ofType));
            }
            else if (graphql_1.isListType(type)) {
                const innerType = wrapTypeWithModifiers(baseType, type.ofType);
                return `${prefix}Maybe<${this.config.immutableTypes ? 'ReadonlyArray' : 'Array'}<${innerType}>>`;
            }
            else {
                return `${prefix}Maybe<${baseType}>`;
            }
        };
        const processorConfig = {
            namespacedImportName: this.config.namespacedImportName,
            convertName: this.convertName.bind(this),
            enumPrefix: this.config.enumPrefix,
            scalars: this.scalars,
            formatNamedField: (name) => (this.config.immutableTypes ? `readonly ${name}` : name),
            wrapTypeWithModifiers,
        };
        const processor = new (config.preResolveTypes ? visitor_plugin_common_1.PreResolveTypesProcessor : ts_selection_set_processor_1.TypeScriptSelectionSetProcessor)(processorConfig);
        this.setSelectionSetHandler(new visitor_plugin_common_1.SelectionSetToObject(processor, this.scalars, this.schema, this.convertName, allFragments, this.config));
        const enumsNames = Object.keys(schema.getTypeMap()).filter(typeName => graphql_1.isEnumType(schema.getType(typeName)));
        this.setVariablesTransformer(new ts_operation_variables_to_object_1.TypeScriptOperationVariablesToObject(this.scalars, this.convertName, this.config.avoidOptionals, this.config.immutableTypes, this.config.namespacedImportName, enumsNames, this.config.enumPrefix));
        this._declarationBlockConfig = {
            ignoreExport: this.config.noExport,
        };
    }
}
exports.TypeScriptDocumentsVisitor = TypeScriptDocumentsVisitor;
//# sourceMappingURL=visitor.js.map