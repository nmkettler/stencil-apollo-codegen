import { visit, concatAST, Kind } from 'graphql';
import { TypeScriptDocumentsVisitor } from './visitor';
import { optimizeOperations } from '@graphql-codegen/visitor-plugin-common';
export const plugin = (schema, rawDocuments, config) => {
    const documents = config.flattenGeneratedTypes ? optimizeOperations(schema, rawDocuments) : rawDocuments;
    const allAst = concatAST(documents.reduce((prev, v) => {
        return [...prev, v.content];
    }, []));
    const allFragments = [
        ...allAst.definitions.filter(d => d.kind === Kind.FRAGMENT_DEFINITION).map(fragmentDef => ({ node: fragmentDef, name: fragmentDef.name.value, onType: fragmentDef.typeCondition.name.value, isExternal: false })),
        ...(config.externalFragments || []),
    ];
    const visitorResult = visit(allAst, {
        leave: new TypeScriptDocumentsVisitor(schema, config, allFragments),
    });
    const result = visitorResult.definitions.join('\n');
    if (config.globalNamespace) {
        return `
    declare global { 
      ${result} 
    }
          `;
    }
    else {
        return result;
    }
};
export { TypeScriptDocumentsVisitor };
//# sourceMappingURL=index.js.map