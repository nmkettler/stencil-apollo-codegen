import { Types } from '@graphql-codegen/plugin-helpers';
import { FragmentDefinitionNode } from 'graphql';
export declare type NearOperationFileConfig = {
    /**
     * @name baseTypesPath
     * @type string
     * @description Required, should point to the base schema types file.
     * The key of the output is used a the base path for this file.
     *
     * @example
     * ```yml
     * generates:
     * src/:
     *  preset: near-operation-file
     *  presetConfig:
     *    baseTypesPath: types.ts
     *  plugins:
     *    - typescript-operations
     * ```
     */
    baseTypesPath: string;
    /**
     * @name extension
     * @type string
     * @description Optional, sets the extension for the generated files. Use this to override the extension if you are using plugins that requires a different type of extensions (such as `typescript-react-apollo`)
     * @default .generates.ts
     *
     * @example
     * ```yml
     * generates:
     * src/:
     *  preset: near-operation-file
     *  presetConfig:
     *    baseTypesPath: types.ts
     *    extension: .generated.tsx
     *  plugins:
     *    - typescript-operations
     *    - typescript-react-apollo
     * ```
     */
    extension?: string;
    /**
     * @name cwd
     * @type string
     * @description Optional, override the `cwd` of the execution. We are using `cwd` to figure out the imports between files. Use this if your execuion path is not your project root directory.
     * @default process.cwd()
     *
     * @example
     * ```yml
     * generates:
     * src/:
     *  preset: near-operation-file
     *  presetConfig:
     *    baseTypesPath: types.ts
     *    cwd: /some/path
     *  plugins:
     *    - typescript-operations
     * ```
     */
    folder?: string;
    /**
     * @name folder
     * @type string
     * @description Optional, defines a folder, (Relative to the source files) where the generated files will be created.
     * @default ''
     *
     * @example
     * ```yml
     * generates:
     * src/:
     *  preset: near-operation-file
     *  presetConfig:
     *    baseTypesPath: types.ts
     *    folder: __generated__
     *  plugins:
     *    - typescript-operations
     * ```
     */
    cwd?: string;
    /**
     * @name importTypesNamespace
     * @type string
     * @description Optional, override the name of the import namespace used to import from the `baseTypesPath` file.
     * @default Types
     *
     * @example
     * ```yml
     * generates:
     * src/:
     *  preset: near-operation-file
     *  presetConfig:
     *    baseTypesPath: types.ts
     *    importTypesNamespace: SchemaTypes
     *  plugins:
     *    - typescript-operations
     * ```
     */
    importTypesNamespace?: string;
};
export declare type FragmentNameToFile = {
    [fragmentName: string]: {
        filePath: string;
        importsNames: string[];
        onType: string;
        node: FragmentDefinitionNode;
    };
};
export declare const preset: Types.OutputPreset<NearOperationFileConfig>;
export default preset;
