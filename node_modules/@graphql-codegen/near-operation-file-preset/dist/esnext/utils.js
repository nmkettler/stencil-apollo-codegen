import { parse, dirname, relative, join, isAbsolute } from 'path';
import { visit } from 'graphql';
export function defineFilepathSubfolder(baseFilePath, folder) {
    const parsedPath = parse(baseFilePath);
    return join(parsedPath.dir, folder, parsedPath.base).replace(/\\/g, '/');
}
export function appendExtensionToFilePath(baseFilePath, extension) {
    const parsedPath = parse(baseFilePath);
    return join(parsedPath.dir, parsedPath.name + extension).replace(/\\/g, '/');
}
export function clearExtension(path) {
    const parsedPath = parse(path);
    return join(parsedPath.dir, parsedPath.name).replace(/\\/g, '/');
}
export function extractExternalFragmentsInUse(documentNode, fragmentNameToFile, result = {}, ignoreList = new Set(), level = 0) {
    // First, take all fragments definition from the current file, and mark them as ignored
    visit(documentNode, {
        enter: {
            FragmentDefinition: (node) => {
                ignoreList.add(node.name.value);
            },
        },
    });
    // Then, look for all used fragments in this document
    visit(documentNode, {
        enter: {
            FragmentSpread: (node) => {
                if (!ignoreList.has(node.name.value)) {
                    result[node.name.value] = level;
                    if (fragmentNameToFile[node.name.value]) {
                        extractExternalFragmentsInUse(fragmentNameToFile[node.name.value].node, fragmentNameToFile, result, ignoreList, level + 1);
                    }
                }
            },
        },
    });
    return result;
}
export function fixLocalFile(path) {
    if (!path.startsWith('..')) {
        return `./${path}`;
    }
    return path;
}
export function resolveRelativeImport(from, to) {
    if (!isAbsolute(from)) {
        throw new Error(`Argument 'from' must be an absolute path, '${from}' given.`);
    }
    if (!isAbsolute(to)) {
        throw new Error(`Argument 'to' must be an absolute path, '${to}' given.`);
    }
    return fixLocalFile(clearExtension(relative(dirname(from), to)));
}
//# sourceMappingURL=utils.js.map