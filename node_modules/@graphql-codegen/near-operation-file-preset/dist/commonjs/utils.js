"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const graphql_1 = require("graphql");
function defineFilepathSubfolder(baseFilePath, folder) {
    const parsedPath = path_1.parse(baseFilePath);
    return path_1.join(parsedPath.dir, folder, parsedPath.base).replace(/\\/g, '/');
}
exports.defineFilepathSubfolder = defineFilepathSubfolder;
function appendExtensionToFilePath(baseFilePath, extension) {
    const parsedPath = path_1.parse(baseFilePath);
    return path_1.join(parsedPath.dir, parsedPath.name + extension).replace(/\\/g, '/');
}
exports.appendExtensionToFilePath = appendExtensionToFilePath;
function clearExtension(path) {
    const parsedPath = path_1.parse(path);
    return path_1.join(parsedPath.dir, parsedPath.name).replace(/\\/g, '/');
}
exports.clearExtension = clearExtension;
function extractExternalFragmentsInUse(documentNode, fragmentNameToFile, result = {}, ignoreList = new Set(), level = 0) {
    // First, take all fragments definition from the current file, and mark them as ignored
    graphql_1.visit(documentNode, {
        enter: {
            FragmentDefinition: (node) => {
                ignoreList.add(node.name.value);
            },
        },
    });
    // Then, look for all used fragments in this document
    graphql_1.visit(documentNode, {
        enter: {
            FragmentSpread: (node) => {
                if (!ignoreList.has(node.name.value)) {
                    result[node.name.value] = level;
                    if (fragmentNameToFile[node.name.value]) {
                        extractExternalFragmentsInUse(fragmentNameToFile[node.name.value].node, fragmentNameToFile, result, ignoreList, level + 1);
                    }
                }
            },
        },
    });
    return result;
}
exports.extractExternalFragmentsInUse = extractExternalFragmentsInUse;
function fixLocalFile(path) {
    if (!path.startsWith('..')) {
        return `./${path}`;
    }
    return path;
}
exports.fixLocalFile = fixLocalFile;
function resolveRelativeImport(from, to) {
    if (!path_1.isAbsolute(from)) {
        throw new Error(`Argument 'from' must be an absolute path, '${from}' given.`);
    }
    if (!path_1.isAbsolute(to)) {
        throw new Error(`Argument 'to' must be an absolute path, '${to}' given.`);
    }
    return fixLocalFile(clearExtension(path_1.relative(path_1.dirname(from), to)));
}
exports.resolveRelativeImport = resolveRelativeImport;
//# sourceMappingURL=utils.js.map