/**
 Stencil Browser Compiler - stencil-browser.js v0.0.0-dev.20191018025336
 MIT Licensed, https://stenciljs.com
*/
const buildEvents = () => {
    const evCallbacks = [];
    const off = (callback) => {
        const index = evCallbacks.findIndex(ev => ev.callback === callback);
        if (index > -1) {
            evCallbacks.splice(index, 1);
            return true;
        }
        return false;
    };
    const on = (arg0, arg1) => {
        if (typeof arg0 === 'function') {
            const eventName = null;
            const callback = arg0;
            evCallbacks.push({
                eventName,
                callback
            });
            return () => off(callback);
        }
        else if (typeof arg0 === 'string' && typeof arg1 === 'function') {
            const eventName = arg0.toLowerCase().trim();
            const callback = arg1;
            evCallbacks.push({
                eventName,
                callback
            });
            return () => off(callback);
        }
        return () => false;
    };
    const emit = (eventName, data) => {
        const normalizedEventName = eventName.toLowerCase().trim();
        for (const ev of evCallbacks) {
            if (ev.eventName == null) {
                try {
                    ev.callback(eventName, data);
                }
                catch (e) {
                    console.error(e);
                }
            }
            else if (ev.eventName === normalizedEventName) {
                try {
                    ev.callback(data);
                }
                catch (e) {
                    console.error(e);
                }
            }
        }
    };
    const unsubscribeAll = () => {
        evCallbacks.length = 0;
    };
    return {
        emit,
        on,
        unsubscribeAll
    };
};

const compilerBuild = {
    buildId: '20191018025336',
    vermoji: 'ðŸ’Ž',
    stencilVersion: '0.0.0-dev.20191018025336',
    rollupVersion: '1.23.1',
    terserVersion: '4.3.4',
    typescriptVersion: '3.6.3',
    minfyJsId: 'terser4.3.4_4',
    optimizeCssId: 'autoprefixer9.6.4_cssnano4.1.10_postcss7.0.18_4',
    transpilerId: 'typescript3.6.3_4'
};
const version = compilerBuild.stencilVersion;

const createWorkerCompiler = async () => {
    let msgIds = 0;
    let isQueued = false;
    const tick = Promise.resolve();
    const resolves = new Map();
    const queuedMsgs = [];
    const events = buildEvents();
    const executingPath = import.meta.url;
    const pathname = `./stencil.js${executingPath.includes('localhost') ? '' : `?v=${version}`}`;
    const workerUrl = new URL(pathname, executingPath);
    const worker = new Worker(workerUrl, { name: `stencil@${version}` });
    const build = () => post({ type: 1 /* Build */ });
    const createWatcher = () => post({ type: 4 /* CreateWatcher */ }).then(() => {
        const start = () => post({ type: 5 /* WatchStart */ });
        const close = () => post({ type: 6 /* WatchClose */ });
        const watcher = {
            start,
            close,
            on: events.on
        };
        return watcher;
    });
    const destroy = () => post({ type: 2 /* DestroyCompiler */ }).then(() => {
        worker.terminate();
    });
    const sys = {
        access: path => post({ type: 10 /* SysAccess */, path }),
        mkdir: path => post({ type: 11 /* SysMkDir */, path }),
        readdir: path => post({ type: 12 /* SysReadDir */, path }),
        readFile: path => post({ type: 13 /* SysReadFile */, path }),
        rmdir: path => post({ type: 14 /* SysRmDir */, path }),
        stat: path => post({ type: 15 /* SysStat */, path }),
        unlink: path => post({ type: 16 /* SysUnlink */, path }),
        writeFile: (path, content) => post({ type: 17 /* SysWriteFile */, path, content }),
        generateContentHash: () => Promise.resolve('TODO')
    };
    const loadConfig = (config) => post({
        type: 3 /* LoadConfig */,
        config
    });
    const compileModule = (code, opts = {}) => post({
        type: 8 /* CompileModule */,
        code,
        opts
    });
    const getMinifyScriptOptions = (opts = {}) => post({
        type: 9 /* MinifyScriptOptions */,
        opts
    });
    const post = (msg) => new Promise(resolve => {
        msg.stencilMsgId = msgIds++;
        resolves.set(msg.stencilMsgId, resolve);
        queuedMsgs.push(msg);
        if (!isQueued) {
            isQueued = true;
            tick.then(() => {
                isQueued = false;
                worker.postMessage(JSON.stringify(queuedMsgs));
                queuedMsgs.length = 0;
            });
        }
    });
    worker.onmessage = (ev) => {
        const msgs = ev.data;
        if (Array.isArray(msgs)) {
            msgs.forEach(msg => {
                if (msg != null) {
                    if (typeof msg.onEventName === 'string') {
                        events.emit(msg.onEventName, msg.data);
                    }
                    else {
                        const resolveFn = resolves.get(msg.stencilMsgId);
                        if (resolveFn) {
                            resolves.delete(msg.stencilMsgId);
                            resolveFn(msg.data);
                        }
                    }
                }
            });
        }
    };
    return post({ type: 0 /* InitCompiler */ }).then(() => {
        const compiler = {
            build,
            compileModule,
            createWatcher,
            destroy,
            getMinifyScriptOptions,
            loadConfig,
            sys
        };
        return compiler;
    });
};

const dependencies = [
    {
        name: 'typescript',
        version: compilerBuild.typescriptVersion,
        main: '/lib/typescript.js',
    },
    {
        name: 'rollup',
        version: compilerBuild.rollupVersion,
        main: '/dist/rollup.browser.es.js'
    },
    {
        name: 'terser',
        version: compilerBuild.terserVersion,
        main: '/dist/bundle.min.js'
    }
];

export { createWorkerCompiler, dependencies, version };
