var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, c as createEvent, g as getElement, h } from './core-eaceb4a9.js';
import { A as ApolloProviderConsumer } from './apollo-client-state-7be4f0b5.js';
var ApolloMutationComponent = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.readyEventEmitter = createEvent(this, "ready", 7);
    }
    class_1.prototype.componentWillLoad = function () {
        this.passMutation();
    };
    class_1.prototype.onPropsChange = function () {
        this.passMutation();
    };
    class_1.prototype.passMutation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.client) {
                    this.mutationFn = function (args) { return _this.client.mutate(Object.assign({ mutation: _this.mutation, variables: _this.variables }, _this.options, args)); };
                    this.readyEventEmitter.emit(this.mutationFn);
                }
                else {
                    throw new Error('You should wrap your parent component with apollo-provider custom element or ApolloProvider functional component');
                }
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.render = function () {
        return this.renderer && this.renderer(this.mutationFn);
    };
    Object.defineProperty(class_1.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "client": ["onPropsChange"],
                "mutation": ["onPropsChange"],
                "variables": ["onPropsChange"],
                "renderer": ["onPropsChange"],
                "options": ["onPropsChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
ApolloProviderConsumer.injectProps(ApolloMutationComponent, ['client']);
var Declarations = "DECLARATIONS";
var Provider = ApolloProviderConsumer.Provider;
var ApolloProviderComponent = /** @class */ (function () {
    function class_2(hostRef) {
        registerInstance(this, hostRef);
        this.declarations = Declarations;
    }
    class_2.prototype.render = function () {
        return (h(Provider, { state: { client: this.client } }, h("slot", null)));
    };
    return class_2;
}());
var ApolloQueryComponent = /** @class */ (function () {
    function class_3(hostRef) {
        registerInstance(this, hostRef);
        this.readyEventEmitter = createEvent(this, "ready", 7);
        this.resultEventEmitter = createEvent(this, "result", 7);
    }
    class_3.prototype.componentWillLoad = function () {
        this.startSubscription();
    };
    class_3.prototype.onPropsChange = function () {
        this.stopSubscription();
        this.startSubscription();
    };
    class_3.prototype.componentDidUnload = function () {
        this.stopSubscription();
    };
    class_3.prototype.getResult = function () {
        return {
            data: this.originalResult && this.originalResult.data,
            loading: this.originalResult ? this.originalResult.loading : true,
            error: {
                graphQLErrors: this.originalResult && this.originalResult.errors,
                networkError: undefined,
                message: this.originalResult && this.originalResult.errors && this.originalResult.errors[0] && this.originalResult.errors[0].message,
                name: this.originalResult && this.originalResult.errors && this.originalResult.errors[0] && this.originalResult.errors[0].name,
                extraInfo: this.originalResult && this.originalResult.errors && this.originalResult.errors[0] && this.originalResult.errors[0].originalError,
            },
            variables: this.variables,
            networkStatus: this.originalResult && this.originalResult.networkStatus,
            refetch: this.observable && this.observable.refetch.bind(this.observable),
            fetchMore: this.observable && this.observable.fetchMore.bind(this.observable),
            startPolling: this.observable && this.observable.startPolling.bind(this.observable),
            stopPolling: this.observable && this.observable.stopPolling.bind(this.observable),
            subscribeToMore: this.observable && this.observable.subscribeToMore.bind(this.observable),
            updateQuery: this.observable && this.observable.updateQuery.bind(this.observable),
            client: this.client,
        };
    };
    class_3.prototype.startSubscription = function () {
        var _this = this;
        if (this.client) {
            var observable = this.client.watchQuery(Object.assign({ query: this.query, variables: this.variables }, this.options));
            this._subscription = observable.subscribe(function (originalResult) {
                _this.originalResult = originalResult;
                _this.resultEventEmitter.emit(_this.getResult());
            }, function (error) {
                _this.error = error;
                _this.resultEventEmitter.emit(_this.getResult());
            });
            this.readyEventEmitter.emit(this.getResult());
        }
        else {
            throw new Error('You should wrap your parent component with apollo-provider custom element or ApolloProvider functional component');
        }
    };
    class_3.prototype.stopSubscription = function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    class_3.prototype.render = function () {
        return this.renderer && this.renderer(this.getResult());
    };
    Object.defineProperty(class_3.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_3, "watchers", {
        get: function () {
            return {
                "client": ["onPropsChange"],
                "query": ["onPropsChange"],
                "variables": ["onPropsChange"],
                "renderer": ["onPropsChange"],
                "options": ["onPropsChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return class_3;
}());
ApolloProviderConsumer.injectProps(ApolloQueryComponent, ['client']);
var ApolloSubscriptionComponent = /** @class */ (function () {
    function class_4(hostRef) {
        registerInstance(this, hostRef);
        this.readyEventEmitter = createEvent(this, "ready", 7);
        this.resultEventEmitter = createEvent(this, "result", 7);
    }
    class_4.prototype.componentWillLoad = function () {
        this.result = {
            data: undefined,
            errors: [],
            loading: true,
            networkStatus: undefined,
            stale: undefined
        };
        this.startSubscription();
    };
    class_4.prototype.onPropsChange = function () {
        this.stopSubscription();
        this.startSubscription();
    };
    class_4.prototype.componentDidUnload = function () {
        this.stopSubscription();
    };
    class_4.prototype.startSubscription = function () {
        var _this = this;
        if (this.client) {
            this._subscription = this.client.subscribe(Object.assign({ query: this.subscription, variables: this.variables }, this.options)).subscribe(function (result) {
                _this.result = result;
                _this.resultEventEmitter.emit(_this.result);
            });
            this.readyEventEmitter.emit(this.result);
        }
        else {
            throw new Error('You should wrap your parent component with apollo-provider custom element or ApolloProvider functional component');
        }
    };
    class_4.prototype.stopSubscription = function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    class_4.prototype.render = function () {
        return this.renderer && this.renderer(this.result);
    };
    Object.defineProperty(class_4.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_4, "watchers", {
        get: function () {
            return {
                "client": ["onPropsChange"],
                "subscription": ["onPropsChange"],
                "variables": ["onPropsChange"],
                "renderer": ["onPropsChange"],
                "options": ["onPropsChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return class_4;
}());
ApolloProviderConsumer.injectProps(ApolloSubscriptionComponent, ['client']);
export { ApolloMutationComponent as apollo_mutation, ApolloProviderComponent as apollo_provider, ApolloQueryComponent as apollo_query, ApolloSubscriptionComponent as apollo_subscription };
