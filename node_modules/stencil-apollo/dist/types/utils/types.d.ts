import { ApolloClient, OperationVariables, MutationOptions, ApolloError, NetworkStatus } from "apollo-client";
import { FetchResult, DocumentNode } from "apollo-link";
import { JSX } from "../stencil.core";
export declare type QueryResult<TData = {}, TVariables = OperationVariables> = {
    data: TData;
    loading: boolean;
    error: ApolloError;
    variables: TVariables;
    networkStatus: NetworkStatus;
    refetch: (variables?: TVariables) => Promise<void>;
    fetchMore: (fetchMoreOptions: {
        query?: DocumentNode;
        variables?: TVariables;
        updateQuery: Function;
    }) => Promise<void>;
    startPolling: (interval: number) => void;
    stopPolling: () => void;
    subscribeToMore: (options: {
        document: DocumentNode;
        variables?: TVariables;
        updateQuery?: Function;
        onError?: Function;
    }) => () => void;
    updateQuery: (previousResult: TData, options: {
        variables: TVariables;
    }) => TData;
    client: ApolloClient<any>;
};
export declare type QueryRenderer<TData = {}, TVariables = OperationVariables> = (result: QueryResult<TData, TVariables>) => JSX.Element | JSX.Element[] | undefined | null;
export declare type MutationFn<TData = {}, TVariables = OperationVariables> = (options: Partial<MutationOptions<TData, TVariables>>) => Promise<FetchResult<TData>>;
export declare type MutationRenderer<TData = {}, TVariables = OperationVariables> = (mutationFn: MutationFn<TData, TVariables>) => JSX.Element | JSX.Element[] | undefined | null;
export declare type SubscriptionRenderer<TData = {}, _TVariables = OperationVariables> = (result: TData) => JSX.Element | JSX.Element[] | undefined | null;
export declare type ConsumerRenderer = (client: ApolloClient<any>) => JSX.Element | JSX.Element[] | undefined | null;
