import { EventEmitter } from "../../stencil.core";
import { DocumentNode } from "graphql";
import { QueryResult, QueryRenderer } from "../../utils/types";
import { ApolloClient, WatchQueryOptions, ApolloQueryResult, ObservableQuery } from "apollo-client";
export declare class ApolloQueryComponent {
    query: DocumentNode;
    renderer: QueryRenderer<any>;
    variables: any;
    options: WatchQueryOptions;
    originalResult: ApolloQueryResult<any>;
    observable: ObservableQuery<any, any>;
    error: Error;
    client: ApolloClient<any>;
    el: HTMLApolloQueryElement;
    readyEventEmitter: EventEmitter<QueryResult<any>>;
    resultEventEmitter: EventEmitter<QueryResult<any>>;
    private _subscription;
    componentWillLoad(): void;
    onPropsChange(): void;
    componentDidUnload(): void;
    getResult(): {
        data: any;
        loading: boolean;
        error: {
            graphQLErrors: readonly any[];
            networkError: any;
            message: any;
            name: any;
            extraInfo: any;
        };
        variables: any;
        networkStatus: import("apollo-client").NetworkStatus;
        refetch: any;
        fetchMore: any;
        startPolling: any;
        stopPolling: any;
        subscribeToMore: any;
        updateQuery: any;
        client: ApolloClient<any>;
    };
    startSubscription(): void;
    stopSubscription(): void;
    render(): LocalJSX.Element | LocalJSX.Element[];
}
