import { ApolloProviderConsumer } from "../../utils/apollo-client-state";
export class ApolloMutationComponent {
    componentWillLoad() {
        this.passMutation();
    }
    onPropsChange() {
        this.passMutation();
    }
    async passMutation() {
        if (this.client) {
            this.mutationFn = args => this.client.mutate(Object.assign({ mutation: this.mutation, variables: this.variables }, this.options, args));
            this.readyEventEmitter.emit(this.mutationFn);
        }
        else {
            throw new Error('You should wrap your parent component with apollo-provider custom element or ApolloProvider functional component');
        }
    }
    render() {
        return this.renderer && this.renderer(this.mutationFn);
    }
    static get is() { return "apollo-mutation"; }
    static get properties() { return {
        "mutation": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "DocumentNode",
                "resolved": "any",
                "references": {
                    "DocumentNode": {
                        "location": "import",
                        "path": "graphql"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "mutation",
            "reflect": false
        },
        "renderer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MutationRenderer",
                "resolved": "(mutationFn: MutationFn<{}, OperationVariables>) => Element | Element[]",
                "references": {
                    "MutationRenderer": {
                        "location": "import",
                        "path": "../../utils/types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "variables": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "variables",
            "reflect": false
        },
        "options": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MutationOptions",
                "resolved": "MutationOptions<{ [key: string]: any; }, OperationVariables>",
                "references": {
                    "MutationOptions": {
                        "location": "import",
                        "path": "apollo-client"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "client": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ApolloClient<any>",
                "resolved": "ApolloClient<any>",
                "references": {
                    "ApolloClient": {
                        "location": "import",
                        "path": "apollo-client"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get states() { return {
        "mutationFn": {}
    }; }
    static get events() { return [{
            "method": "readyEventEmitter",
            "name": "ready",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "MutationFn<any, any>",
                "resolved": "(options: Partial<MutationOptions<any, any>>) => Promise<any>",
                "references": {
                    "MutationFn": {
                        "location": "import",
                        "path": "../../utils/types"
                    }
                }
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "client",
            "methodName": "onPropsChange"
        }, {
            "propName": "mutation",
            "methodName": "onPropsChange"
        }, {
            "propName": "variables",
            "methodName": "onPropsChange"
        }, {
            "propName": "renderer",
            "methodName": "onPropsChange"
        }, {
            "propName": "options",
            "methodName": "onPropsChange"
        }]; }
}
ApolloProviderConsumer.injectProps(ApolloMutationComponent, ['client']);
