import { ApolloProviderConsumer } from "../../utils/apollo-client-state";
export class ApolloQueryComponent {
    componentWillLoad() {
        this.startSubscription();
    }
    onPropsChange() {
        this.stopSubscription();
        this.startSubscription();
    }
    componentDidUnload() {
        this.stopSubscription();
    }
    getResult() {
        return {
            data: this.originalResult && this.originalResult.data,
            loading: this.originalResult ? this.originalResult.loading : true,
            error: {
                graphQLErrors: this.originalResult && this.originalResult.errors,
                networkError: undefined,
                message: this.originalResult && this.originalResult.errors && this.originalResult.errors[0] && this.originalResult.errors[0].message,
                name: this.originalResult && this.originalResult.errors && this.originalResult.errors[0] && this.originalResult.errors[0].name,
                extraInfo: this.originalResult && this.originalResult.errors && this.originalResult.errors[0] && this.originalResult.errors[0].originalError,
            },
            variables: this.variables,
            networkStatus: this.originalResult && this.originalResult.networkStatus,
            refetch: this.observable && this.observable.refetch.bind(this.observable),
            fetchMore: this.observable && this.observable.fetchMore.bind(this.observable),
            startPolling: this.observable && this.observable.startPolling.bind(this.observable),
            stopPolling: this.observable && this.observable.stopPolling.bind(this.observable),
            subscribeToMore: this.observable && this.observable.subscribeToMore.bind(this.observable),
            updateQuery: this.observable && this.observable.updateQuery.bind(this.observable),
            client: this.client,
        };
    }
    startSubscription() {
        if (this.client) {
            const observable = this.client.watchQuery(Object.assign({ query: this.query, variables: this.variables }, this.options));
            this._subscription = observable.subscribe(originalResult => {
                this.originalResult = originalResult;
                this.resultEventEmitter.emit(this.getResult());
            }, error => {
                this.error = error;
                this.resultEventEmitter.emit(this.getResult());
            });
            this.readyEventEmitter.emit(this.getResult());
        }
        else {
            throw new Error('You should wrap your parent component with apollo-provider custom element or ApolloProvider functional component');
        }
    }
    stopSubscription() {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    }
    render() {
        return this.renderer && this.renderer(this.getResult());
    }
    static get is() { return "apollo-query"; }
    static get properties() { return {
        "query": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "DocumentNode",
                "resolved": "any",
                "references": {
                    "DocumentNode": {
                        "location": "import",
                        "path": "graphql"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "query",
            "reflect": false
        },
        "renderer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "QueryRenderer<any>",
                "resolved": "(result: QueryResult<any, OperationVariables>) => Element | Element[]",
                "references": {
                    "QueryRenderer": {
                        "location": "import",
                        "path": "../../utils/types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "variables": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "variables",
            "reflect": false
        },
        "options": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "WatchQueryOptions",
                "resolved": "WatchQueryOptions<OperationVariables>",
                "references": {
                    "WatchQueryOptions": {
                        "location": "import",
                        "path": "apollo-client"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "client": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ApolloClient<any>",
                "resolved": "ApolloClient<any>",
                "references": {
                    "ApolloClient": {
                        "location": "import",
                        "path": "apollo-client"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get states() { return {
        "originalResult": {},
        "error": {}
    }; }
    static get events() { return [{
            "method": "readyEventEmitter",
            "name": "ready",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "QueryResult<any>",
                "resolved": "{ data: any; loading: boolean; error: ApolloError; variables: OperationVariables; networkStatus: NetworkStatus; refetch: (variables?: OperationVariables) => Promise<void>; fetchMore: (fetchMoreOptions: { query?: any; variables?: OperationVariables; updateQuery: Function; }) => Promise<void>; startPolling: (interval: number) => void; stopPolling: () => void; subscribeToMore: (options: { document: any; variables?: OperationVariables; updateQuery?: Function; onError?: Function; }) => () => void; updateQuery: (previousResult: any, options: { variables: OperationVariables; }) => any; client: ApolloClient<any>; }",
                "references": {
                    "QueryResult": {
                        "location": "import",
                        "path": "../../utils/types"
                    }
                }
            }
        }, {
            "method": "resultEventEmitter",
            "name": "result",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "QueryResult<any>",
                "resolved": "{ data: any; loading: boolean; error: ApolloError; variables: OperationVariables; networkStatus: NetworkStatus; refetch: (variables?: OperationVariables) => Promise<void>; fetchMore: (fetchMoreOptions: { query?: any; variables?: OperationVariables; updateQuery: Function; }) => Promise<void>; startPolling: (interval: number) => void; stopPolling: () => void; subscribeToMore: (options: { document: any; variables?: OperationVariables; updateQuery?: Function; onError?: Function; }) => () => void; updateQuery: (previousResult: any, options: { variables: OperationVariables; }) => any; client: ApolloClient<any>; }",
                "references": {
                    "QueryResult": {
                        "location": "import",
                        "path": "../../utils/types"
                    }
                }
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "client",
            "methodName": "onPropsChange"
        }, {
            "propName": "query",
            "methodName": "onPropsChange"
        }, {
            "propName": "variables",
            "methodName": "onPropsChange"
        }, {
            "propName": "renderer",
            "methodName": "onPropsChange"
        }, {
            "propName": "options",
            "methodName": "onPropsChange"
        }]; }
}
ApolloProviderConsumer.injectProps(ApolloQueryComponent, ['client']);
